# Generated by Django 5.0.1 on 2024-04-11 08:10

import api.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='bstat',
            fields=[
                ('id', models.IntegerField(default=api.models.id_inc1, primary_key=True, serialize=False)),
                ('name', models.CharField(default=None, max_length=100, null=True)),
                ('bref', models.CharField(default=None, max_length=10, null=True)),
                ('bcode', models.IntegerField()),
                ('type', models.CharField(max_length=50, null=True)),
                ('display_name', models.CharField(max_length=100, null=True)),
                ('founded_yr', models.CharField(max_length=10)),
                ('hqcity', models.CharField(max_length=50)),
                ('hqstate', models.CharField(max_length=50)),
                ('active', models.BooleanField()),
                ('bank_url', models.CharField(max_length=500, null=True)),
                ('major_bank', models.CharField(max_length=5, null=True)),
                ('payout_freq', models.CharField(max_length=20, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Fdrate',
            fields=[
                ('id', models.IntegerField(default=api.models.id_inc2, primary_key=True, serialize=False)),
                ('fdrate_id', models.IntegerField(default=api.models.fdrate_inc)),
                ('bcode', models.IntegerField()),
                ('bref', models.CharField(max_length=10)),
                ('effdate', models.CharField(max_length=15)),
                ('effenddate', models.CharField(max_length=15)),
                ('special_rate', models.CharField(max_length=5, null=True)),
                ('tenorstart', models.CharField(help_text="please enter tenor in days, months or years only 'eg.1y10m10d' ", max_length=15, validators=[api.models.validate_tenor])),
                ('tenorend', models.CharField(help_text="please enter tenor in days, months or years only 'eg.1y10m10d'", max_length=15, validators=[api.models.validate_tenor])),
                ('startincl', models.CharField(help_text="if tenor starts from this date then put 'y' if not then put 'gt'(greater than)", max_length=7)),
                ('endincl', models.CharField(help_text="if tenor ends from this date then put 'y' if not then put 'lt'(less than)", max_length=7)),
                ('fdrate', models.FloatField()),
                ('addsenior', models.FloatField(blank=True, help_text='if there is no addsenior, put 0 or leave it null', null=True)),
                ('addsupsenior', models.FloatField(blank=True, help_text='if there is no addsupsenior, put 0 or leave it null', null=True)),
                ('notes', models.CharField(blank=True, max_length=500, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='Sdrate',
            fields=[
                ('id', models.IntegerField(default=api.models.id_inc, primary_key=True, serialize=False)),
                ('bank_name', models.CharField(choices=[('Bank of Baroda', 'Bank of Baroda'), ('Bank of India', 'Bank of India'), ('Bank of Maharashtra', 'Bank of Maharashtra'), ('Canara Bank', 'Canara Bank'), ('Central Bank of India', 'Central Bank of India'), ('Indian Bank', 'Indian Bank'), ('Indian Overseas Bank', 'Indian Overseas Bank'), ('Punjab and Sind Bank', 'Punjab and Sind Bank'), ('Punjab National Bank', 'Punjab National Bank'), ('State Bank of India', 'State Bank of India'), ('UCO Bank', 'UCO Bank'), ('Union Bank of India', 'Union Bank of India'), ('Axis Bank', 'Axis Bank'), ('Bandhan Bank', 'Bandhan Bank'), ('CSB Bank', 'CSB Bank'), ('City Union Bank', 'City Union Bank'), ('DCB Bank', 'DCB Bank'), ('Dhanlaxmi Bank', 'Dhanlaxmi Bank'), ('Federal Bank', 'Federal Bank'), ('HDFC Bank', 'HDFC Bank'), ('ICICI Bank', 'ICICI Bank'), ('IDBI Bank', 'IDBI Bank'), ('IDFC First Bank', 'IDFC First Bank'), ('IndusInd Bank', 'IndusInd Bank'), ('Jammu & Kashmir Bank', 'Jammu & Kashmir Bank'), ('Karnataka Bank', 'Karnataka Bank'), ('Karur Vysya Bank', 'Karur Vysya Bank'), ('Kotak Mahindra Bank', 'Kotak Mahindra Bank'), ('Nainital Bank', 'Nainital Bank'), ('RBL Bank', 'RBL Bank'), ('South Indian Bank', 'South Indian Bank'), ('Tamilnad Mercantile Bank', 'Tamilnad Mercantile Bank'), ('Yes Bank', 'Yes Bank'), ('Fincare Small Finance', 'Fincare Small Finance'), ('Au Small Finance', 'Au Small Finance'), ('Capital Small Finance', 'Capital Small Finance'), ('Equitas Small Finance', 'Equitas Small Finance'), ('ESAF Small Finance', 'ESAF Small Finance'), ('Jana Small Finance', 'Jana Small Finance'), ('North East Small Finance', 'North East Small Finance'), ('Shivalik Small Finance', 'Shivalik Small Finance'), ('Suryoday Small Finance', 'Suryoday Small Finance'), ('Ujjivan Small Finance', 'Ujjivan Small Finance'), ('Unity Small Finance', 'Unity Small Finance'), ('Utkarsh Small Finance', 'Utkarsh Small Finance'), ('Barclays', 'Barclays'), ('DBS', 'DBS'), ('Deutsche Bank', 'Deutsche Bank'), ('Doha', 'Doha'), ('HSBC', 'HSBC'), ('StandardChartered', 'StandardChartered')], max_length=100, null=True)),
                ('bref', models.CharField(default='', max_length=10)),
                ('bcode', models.IntegerField(default=999)),
                ('rateid', models.IntegerField(default=api.models.auto_increament)),
                ('date', models.DateField(null=True)),
                ('effdate', models.CharField(max_length=25, null=True)),
                ('s1', models.CharField(default=None, help_text='only enter amounts in k(thousands), l(lacks), c(crores) if its a last slab just put $', max_length=45, null=True, validators=[api.models.validate_slabs])),
                ('r1', models.FloatField(default=None, null=True)),
                ('s2', models.CharField(blank=True, default=None, help_text='only enter amounts in k(thousands), l(lacks), c(crores) if its a last slab just put $', max_length=45, null=True, validators=[api.models.validate_slabs])),
                ('r2', models.FloatField(blank=True, default=None, null=True)),
                ('s3', models.CharField(blank=True, default=None, help_text='only enter amounts in k(thousands), l(lacks), c(crores) if its a last slab just put $', max_length=45, null=True, validators=[api.models.validate_slabs])),
                ('r3', models.FloatField(blank=True, default=None, null=True)),
                ('s4', models.CharField(blank=True, default=None, help_text='only enter amounts in k(thousands), l(lacks), c(crores) if its a last slab just put $', max_length=45, null=True, validators=[api.models.validate_slabs])),
                ('r4', models.FloatField(blank=True, default=None, null=True)),
                ('s5', models.CharField(blank=True, default=None, help_text='only enter amounts in k(thousands), l(lacks), c(crores) if its a last slab just put $', max_length=45, null=True, validators=[api.models.validate_slabs])),
                ('r5', models.FloatField(blank=True, default=None, null=True)),
                ('s6', models.CharField(blank=True, default=None, help_text='only enter amounts in k(thousands), l(lacks), c(crores) if its a last slab just put $', max_length=45, null=True, validators=[api.models.validate_slabs])),
                ('r6', models.FloatField(blank=True, default=None, null=True)),
                ('s7', models.CharField(blank=True, default=None, help_text='only enter amounts in k(thousands), l(lacks), c(crores) if its a last slab just put $', max_length=45, null=True, validators=[api.models.validate_slabs])),
                ('r7', models.FloatField(blank=True, default=None, null=True)),
                ('s8', models.CharField(blank=True, default=None, help_text='only enter amounts in k(thousands), l(lacks), c(crores) if its a last slab just put $', max_length=45, null=True, validators=[api.models.validate_slabs])),
                ('r8', models.FloatField(blank=True, default=None, null=True)),
                ('s9', models.CharField(blank=True, default=None, help_text='only enter amounts in k(thousands), l(lacks), c(crores) if its a last slab just put $', max_length=45, null=True, validators=[api.models.validate_slabs])),
                ('r9', models.FloatField(blank=True, default=None, null=True)),
                ('s10', models.CharField(blank=True, default=None, help_text='only enter amounts in k(thousands), l(lacks), c(crores) if its a last slab just put $', max_length=45, null=True, validators=[api.models.validate_slabs])),
                ('r10', models.FloatField(blank=True, default=None, null=True)),
                ('s11', models.CharField(blank=True, default=None, help_text='only enter amounts in k(thousands), l(lacks), c(crores) if its a last slab just put $', max_length=45, null=True, validators=[api.models.validate_slabs])),
                ('r11', models.FloatField(blank=True, default=None, null=True)),
                ('s12', models.CharField(blank=True, default=None, help_text='only enter amounts in k(thousands), l(lacks), c(crores) if its a last slab just put $', max_length=45, null=True, validators=[api.models.validate_slabs])),
                ('r12', models.FloatField(blank=True, default=None, null=True)),
                ('s13', models.CharField(blank=True, default=None, help_text='only enter amounts in k(thousands), l(lacks), c(crores) if its a last slab just put $', max_length=45, null=True, validators=[api.models.validate_slabs])),
                ('r13', models.FloatField(blank=True, default=None, null=True)),
                ('s14', models.CharField(blank=True, default=None, help_text='only enter amounts in k(thousands), l(lacks), c(crores) if its a last slab just put $', max_length=45, null=True, validators=[api.models.validate_slabs])),
                ('r14', models.FloatField(blank=True, default=None, null=True)),
                ('s15', models.CharField(blank=True, default=None, help_text='only enter amounts in k(thousands), l(lacks), c(crores) if its a last slab just put $', max_length=45, null=True, validators=[api.models.validate_slabs])),
                ('r15', models.FloatField(blank=True, default=None, null=True)),
                ('floatrate', models.FloatField(default=0.0)),
            ],
        ),
    ]
